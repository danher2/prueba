shell

TABLE="test"
LOG="expiration_update_log.csv"
EXP_DAYS=60

# Compute expiration epoch (UTC now + EXP_DAYS days)
EXPIRATION=$(date -u -d "+${EXP_DAYS} days" +%s)

# Initialize CSV log
echo "ID,ACCOUNTNUMBER,Status" > "$LOG"

NEXT_TOKEN=""
UPDATED=0

while :; do
  # 1) Scan for items missing 'expiration', output ID & ACCOUNT as text:
  if [[ -n "$NEXT_TOKEN" ]]; then
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --filter-expression "attribute_not_exists(expiration)" \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text \
      --starting-token "$NEXT_TOKEN")
  else
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --filter-expression "attribute_not_exists(expiration)" \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text)
  fi

  # If there’s nothing to update, inform and break
  if [[ -z "$RAW_LIST" ]]; then
    echo "No items found without an expiration—nothing to update."
    break
  fi

  # 2) Process each line (ID<TAB>ACCOUNTNUMBER)
  while read -r ID ACC; do
	ID=$(echo "$ID" | tr -d '\r\n[:space:]')
    ACC=$(echo "$ACC" | tr -d '\r\n[:space:]')
  
    aws dynamodb update-item \
      --table-name "$TABLE" \
      --key "{\"ID\":{\"S\":\"$ID\"},\"ACCOUNTNUMBER\":{\"S\":\"$ACC\"}}" \
      --update-expression "SET expiration = :exp" \
      --expression-attribute-values "{\":exp\":{\"N\":\"$EXPIRATION\"}}" \
      --return-values NONE

    echo "$ID,$ACC,Updated" >> "$LOG"
    ((UPDATED++))
  done <<< "$RAW_LIST"

  # 3) Get NextToken for pagination (AWS CLI v2)
  NEXT_TOKEN=$(aws dynamodb scan \
    --table-name "$TABLE" \
    --filter-expression "attribute_not_exists(expiration)" \
    --projection-expression "ID" \
    --query "NextToken" \
    --output text)

  # AWS CLI outputs “None” or blank when there is no next token
  [[ "$NEXT_TOKEN" == "None" || -z "$NEXT_TOKEN" ]] && break
done

# Only show the summary if we actually updated something
if (( UPDATED > 0 )); then
  echo
  echo "Update complete. $UPDATED records updated. See $LOG."
fi

===================================================================================================================

BAT

@echo off
setlocal enabledelayedexpansion

rem ── Configuration ─────────────
set "TABLE=test"
set "LOG=expiration_update_log.csv"
set /a EXP_DAYS=60

rem ── Compute expiration epoch (UTC now + EXP_DAYS)
for /f %%T in ('powershell -NoProfile -Command ^
  "(Get-Date).AddDays(%EXP_DAYS%).ToUniversalTime().Subtract([datetime]'1970-01-01').TotalSeconds|ForEach-Object {[int]$_}"') do (
  set "EXPIRATION=%%T"
)

rem ── Initialize CSV log
echo ID,ACCOUNTNUMBER,Status > "%LOG%"

rem ── Paging setup
set "NEXT_TOKEN="
set /a UPDATED=0

:PAGE_LOOP
  rem 1) Scan, filtering out items that already have 'expiration'
  if defined NEXT_TOKEN (
    set "SCAN_OPTS=--starting-token %NEXT_TOKEN%"
  ) else (
    set "SCAN_OPTS="
  )

  for /f "tokens=1,2" %%A in ('aws dynamodb scan --table-name %TABLE% ^
      --filter-expression "attribute_not_exists(expiration)" ^
      --projection-expression "ID,ACCOUNTNUMBER" ^
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" ^
      --output text %SCAN_OPTS%') do (
      
      set "ID=%%A"
      set "ACC=%%B"

      rem 2) Update expiration
      aws dynamodb update-item ^
        --table-name %TABLE% ^
        --key "{\"ID\":{\"S\":\"!ID!\"},\"ACCOUNTNUMBER\":{\"S\":\"!ACC!\"}}" ^
        --update-expression "SET expiration = :exp" ^
        --expression-attribute-values "{\":exp\":{\"N\":\"%EXPIRATION%\"}}" ^
        --return-values NONE

      echo !ID!,!ACC!,Updated>>"%LOG%"
      set /a UPDATED+=1
  )

  rem 3) Get the NextToken for pagination (AWS CLI v2)
  for /f %%T in ('aws dynamodb scan --table-name %TABLE% ^
      --filter-expression "attribute_not_exists(expiration)" ^
      --projection-expression "ID" ^
      --query "NextToken" ^
      --output text') do set "NEXT_TOKEN=%%T"

  if "%NEXT_TOKEN%"=="None" set "NEXT_TOKEN="
  if defined NEXT_TOKEN goto PAGE_LOOP

:END
echo.
echo Update complete. %UPDATED% records updated. See %LOG%.
endlocal


================================================================
sh

#!/usr/bin/env bash
set -euo pipefail

# ── Configuration ─────────────
TABLE="test"
LOG="expiration_update_log.csv"
EXP_DAYS=60

# NEW: set the values you want to filter on
BATCH_ID="yourBatchIdValue"
PCLM_TYPE="yourPclmTypeValue"

# Compute expiration epoch (UTC now + EXP_DAYS days)
EXPIRATION=$(date -u -d "+${EXP_DAYS} days" +%s)

# Initialize CSV log
echo "ID,ACCOUNTNUMBER,Status" > "$LOG"

NEXT_TOKEN=""
UPDATED=0

while :; do
  # 1) Scan for items missing 'expiration' AND matching batchID & PCLMType
  if [[ -n "$NEXT_TOKEN" ]]; then
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
      --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text \
      --starting-token "$NEXT_TOKEN")
  else
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
      --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text)
  fi

  # If there’s nothing to update, inform and break
  if [[ -z "$RAW_LIST" ]]; then
    echo "No items found without an expiration—nothing to update."
    break
  fi

  # 2) Process each line (ID<TAB>ACCOUNTNUMBER)
  while read -r ID ACC; do
    ID=$(echo "$ID" | tr -d '\r\n[:space:]')
    ACC=$(echo "$ACC" | tr -d '\r\n[:space:]')

    aws dynamodb update-item \
      --table-name "$TABLE" \
      --key "{\"ID\":{\"S\":\"$ID\"},\"ACCOUNTNUMBER\":{\"S\":\"$ACC\"}}" \
      --update-expression "SET expiration = :exp" \
      --expression-attribute-values "{\":exp\":{\"N\":\"$EXPIRATION\"}}" \
      --return-values NONE

    echo "$ID,$ACC,Updated" >> "$LOG"
    ((UPDATED++))
  done <<< "$RAW_LIST"

  # 3) Get NextToken for pagination (AWS CLI v2), with the same filter
  NEXT_TOKEN=$(aws dynamodb scan \
    --table-name "$TABLE" \
    --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
    --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
    --projection-expression "ID" \
    --query "NextToken" \
    --output text)

  # AWS CLI outputs “None” or blank when there is no next token
  [[ "$NEXT_TOKEN" == "None" || -z "$NEXT_TOKEN" ]] && break
done

# Only show the summary if we actually updated something
if (( UPDATED > 0 )); then
  echo
  echo "Update complete. $UPDATED records updated. See $LOG."
fi
=======================================================================================

#!/usr/bin/env bash
set -euo pipefail

# ── Configuration ─────────────
TABLE="test"
LOG="expiration_update_log.csv"
EXP_DAYS=60

# NEW: values to filter by
BATCH_ID="yourBatchIdValue"
PCLM_TYPE="yourPclmTypeValue"

# Compute expiration epoch (UTC now + EXP_DAYS days)
EXPIRATION=$(date -u -d "+${EXP_DAYS} days" +%s)

# Initialize CSV log
echo "ID,ACCOUNTNUMBER,Status" > "$LOG"

NEXT_TOKEN=""
UPDATED=0
PAGE=0

while :; do
  # ── Page counter & message ─────────────
  PAGE=$((PAGE+1))
  echo "▶ Scanning page $PAGE..."

  # 1) Scan for items missing 'expiration' and matching BatchID & PCLMType:
  if [[ -n "$NEXT_TOKEN" ]]; then
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
      --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text \
      --starting-token "$NEXT_TOKEN")
  else
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
      --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text)
  fi

  # If there’s nothing to update, inform and break
  if [[ -z "$RAW_LIST" ]]; then
    echo "No items found without an expiration—nothing to update."
    break
  fi

  # 2) Process each line (ID<TAB>ACCOUNTNUMBER)
  while read -r ID ACC; do
    ID=${ID//$'\r'/}
    ACC=${ACC//$'\r'/}

    aws dynamodb update-item \
      --table-name "$TABLE" \
      --key "{\"ID\":{\"S\":\"$ID\"},\"ACCOUNTNUMBER\":{\"S\":\"$ACC\"}}" \
      --update-expression "SET expiration = :exp" \
      --expression-attribute-values "{\":exp\":{\"N\":\"$EXPIRATION\"}}" \
      --return-values NONE

    echo "$ID,$ACC,Updated" >> "$LOG"
    ((UPDATED++))
  done <<< "$RAW_LIST"

  # 3) Get NextToken for pagination (AWS CLI v2), with same filter
  NEXT_TOKEN=$(aws dynamodb scan \
    --table-name "$TABLE" \
    --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
    --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
    --projection-expression "ID" \
    --query "NextToken" \
    --output text)

  # AWS CLI outputs “None” or blank when there is no next token
  [[ "$NEXT_TOKEN" == "None" || -z "$NEXT_TOKEN" ]] && break
done

# Only show the summary if we actually updated something
if (( UPDATED > 0 )); then
  echo
  echo "Processed $PAGE pages, updated $UPDATED records. See $LOG."
fi
=========================================================================================
#!/usr/bin/env bash
set -euo pipefail

# ── Configuration ─────────────
TABLE="test"
LOG="expiration_update_log.csv"
EXP_DAYS=60

# Filter values
BATCH_ID="yourBatchIdValue"
PCLM_TYPE="yourPclmTypeValue"

# Compute expiration epoch (UTC now + EXP_DAYS days)
EXPIRATION=$(date -u -d "+${EXP_DAYS} days" +%s)

# Initialize CSV log
echo "ID,ACCOUNTNUMBER,Status" > "$LOG"

NEXT_TOKEN=""
UPDATED=0
PAGE=0

while :; do
  # Increment page counter and show progress
  PAGE=$((PAGE+1))
  echo "▶ Scanning page $PAGE..."

  # 1) Scan for items missing 'expiration' and matching batchID & PCLMType
  if [[ -n "$NEXT_TOKEN" ]]; then
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
      --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text \
      --starting-token "$NEXT_TOKEN")
  else
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
      --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text)
  fi

  # If there’s nothing to update, inform and break
  if [[ -z "$RAW_LIST" ]]; then
    echo "No items found without an expiration—nothing to update."
    break
  fi

  # 2) Process each line (ID<TAB>ACCOUNTNUMBER), update and log
  while read -r ID ACC; do
    # Strip any stray carriage returns
    ID=${ID//$'\r'/}
    ACC=${ACC//$'\r'/}

    aws dynamodb update-item \
      --table-name "$TABLE" \
      --key "{\"ID\":{\"S\":\"$ID\"},\"ACCOUNTNUMBER\":{\"S\":\"$ACC\"}}" \
      --update-expression "SET expiration = :exp" \
      --expression-attribute-values "{\":exp\":{\"N\":\"$EXPIRATION\"}}" \
      --return-values NONE

    echo "$ID,$ACC,Updated" >> "$LOG"
    ((UPDATED++))
    # Live counter on the same line
    printf '\rRecords processed: %d' "$UPDATED"
  done <<< "$RAW_LIST"
  printf '\n'

  # 3) Get NextToken for pagination, with same filter
  NEXT_TOKEN=$(aws dynamodb scan \
    --table-name "$TABLE" \
    --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
    --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
    --projection-expression "ID" \
    --query "NextToken" \
    --output text)

  # Break if no more pages
  [[ "$NEXT_TOKEN" == "None" || -z "$NEXT_TOKEN" ]] && break
done

# Final summary
if (( UPDATED > 0 )); then
  echo
  echo "Processed $PAGE pages, updated $UPDATED records. See $LOG."
fi


=======================================================================================

#!/usr/bin/env bash
set -euo pipefail

# ── Configuration ─────────────
TABLE="test"
EXP_DAYS=60
PAGE_SIZE=1000              # max items to fetch per Scan “page”

# Filter values
BATCH_ID="yourBatchIdValue"
PCLM_TYPE="yourPclmTypeValue"

# Compute expiration epoch (UTC now + EXP_DAYS days)
EXPIRATION=$(date -u -d "+${EXP_DAYS} days" +%s)

NEXT_TOKEN=""
UPDATED=0
PAGE=0

while :; do
  # ── Page counter & message ─────────────
  PAGE=$((PAGE+1))
  echo "▶ Scanning page $PAGE..."

  # 1) Scan for up to $PAGE_SIZE items missing 'expiration' & matching filters
  if [[ -n "$NEXT_TOKEN" ]]; then
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --limit "$PAGE_SIZE" \
      --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
      --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text \
      --starting-token "$NEXT_TOKEN")
  else
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --limit "$PAGE_SIZE" \
      --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
      --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text)
  fi

  # If there’s nothing to update on this page, exit
  if [[ -z "$RAW_LIST" ]]; then
    echo "No items found without an expiration—nothing to update."
    break
  fi

  # 2) Update each record, track live count
  while read -r ID ACC; do
    ID=${ID//$'\r'/}
    ACC=${ACC//$'\r'/}

    aws dynamodb update-item \
      --table-name "$TABLE" \
      --key "{\"ID\":{\"S\":\"$ID\"},\"ACCOUNTNUMBER\":{\"S\":\"$ACC\"}}" \
      --update-expression "SET expiration = :exp" \
      --expression-attribute-values "{\":exp\":{\"N\":\"$EXPIRATION\"}}" \
      --return-values NONE

    ((UPDATED++))
    printf '\rRecords processed: %d' "$UPDATED"
  done <<< "$RAW_LIST"
  printf '\n'

  # 3) Get NextToken for the next page (same filters & limit)
  NEXT_TOKEN=$(aws dynamodb scan \
    --table-name "$TABLE" \
      --limit "$PAGE_SIZE" \
      --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
      --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
      --projection-expression "ID" \
      --query "NextToken" \
      --output text)

  # If no more pages remain, stop
  [[ "$NEXT_TOKEN" == "None" || -z "$NEXT_TOKEN" ]] && break
done

# Final summary
if (( UPDATED > 0 )); then
  echo
  echo "Processed $PAGE pages, updated $UPDATED records."
fi
========================================================================================

#!/usr/bin/env bash
set -euo pipefail

# ── Configuration ─────────────
TABLE="test"
EXP_DAYS=60
PAGE_SIZE=1000              # max items to fetch per Scan “page”

# Filter values
BATCH_ID="yourBatchIdValue"
PCLM_TYPE="yourPclmTypeValue"

# Computes the expiration timestamp (UTC now + EXP_DAYS days)
EXPIRATION=$(date -u -d "+${EXP_DAYS} days" +%s)

# Tracks when we last refreshed credentials
LAST_REFRESH=0

# Function to refresh AWS STS session credentials (valid 1h)
refresh_credentials() {
  echo "⟳ Refreshing AWS session token…"
  # Fetch new temporary credentials and split them into three vars
  read AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN <<< \
    $(aws sts get-session-token \
         --duration-seconds 3600 \
         --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
         --output text)
  export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
  LAST_REFRESH=$(date +%s)
}

# Prime the initial session
refresh_credentials

NEXT_TOKEN=""
UPDATED=0
PAGE=0

while :; do
  # If it's been almost an hour, refresh before the next scan
  NOW=$(date +%s)
  if (( NOW - LAST_REFRESH > 3500 )); then
    refresh_credentials
  fi

  # Page counter & progress message
  PAGE=$((PAGE+1))
  echo "▶ Scanning page $PAGE..."

  # 1) Scan up to $PAGE_SIZE items missing 'expiration' & matching filters
  if [[ -n "$NEXT_TOKEN" ]]; then
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --limit "$PAGE_SIZE" \
      --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
      --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text \
      --starting-token "$NEXT_TOKEN")
  else
    RAW_LIST=$(aws dynamodb scan \
      --table-name "$TABLE" \
      --limit "$PAGE_SIZE" \
      --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
      --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
      --projection-expression "ID,ACCOUNTNUMBER" \
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" \
      --output text)
  fi

  # If no items on this page, we're done
  if [[ -z "$RAW_LIST" ]]; then
    echo "No items found without an expiration—nothing to update."
    break
  fi

  # 2) Update each item, show live counter
  while read -r ID ACC; do
    # strip stray carriage returns
    ID=${ID//$'\r'/}
    ACC=${ACC//$'\r'/}

    aws dynamodb update-item \
      --table-name "$TABLE" \
      --key "{\"ID\":{\"S\":\"$ID\"},\"ACCOUNTNUMBER\":{\"S\":\"$ACC\"}}" \
      --update-expression "SET expiration = :exp" \
      --expression-attribute-values "{\":exp\":{\"N\":\"$EXPIRATION\"}}" \
      --return-values NONE

    ((UPDATED++))
    printf '\rRecords processed: %d' "$UPDATED"
  done <<< "$RAW_LIST"
  printf '\n'

  # 3) Fetch NextToken (same filters & limit)
  NEXT_TOKEN=$(aws dynamodb scan \
    --table-name "$TABLE" \
    --limit "$PAGE_SIZE" \
    --filter-expression "attribute_not_exists(expiration) AND batchID = :batchID AND PCLMType = :pclmType" \
    --expression-attribute-values '{":batchID":{"S":"'"$BATCH_ID"'"},":pclmType":{"S":"'"$PCLM_TYPE"'"}}' \
    --projection-expression "ID" \
    --query "NextToken" \
    --output text)

  # If no more pages remain, exit
  [[ "$NEXT_TOKEN" == "None" || -z "$NEXT_TOKEN" ]] && break
done

# Final summary
if (( UPDATED > 0 )); then
  echo
  echo "Processed $PAGE pages, updated $UPDATED records."
fi



