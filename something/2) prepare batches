#!/usr/bin/env bash
set -euo pipefail

EXPIRATION=$(date -u -d "+60 days" +%s)

# Split into 25-line chunks
split -l 25 keys_to_update.txt batch_

# Build one JSON file per chunk
for chunk in batch_*; do
  jsonfile="${chunk}.json"
  {
    echo '{'
    echo '  "test": ['
    while read -r ID ACC; do
      ID=${ID//$'\r'/}
      ACC=${ACC//$'\r'/}
      cat <<EOF
    {
      "PutRequest": {
        "Item": {
          "ID": {"S": "$ID"},
          "ACCOUNTNUMBER": {"S": "$ACC"},
          "expiration": {"N": "$EXPIRATION"}
        }
      }
    },
EOF
    done < "$chunk"
    echo '  ]'
    echo '}'
  } | sed '$s/},/}/' > "$jsonfile"
  echo "Prepared $jsonfile"
done

==========================================================

#!/usr/bin/env bash
set -euo pipefail

# ── Configuration ───────────────────────────────────
EXPIRATION=$(date -u -d "+60 days" +%s)
KEYFILE="keys_to_update.txt"
OUTDIR="batches"
CHUNK_PREFIX="chunk_"

# ── Prepare output directory ────────────────────────
rm -rf "$OUTDIR"
mkdir -p "$OUTDIR"

# ── 1) Split into 25-line chunk files under batches/ ─
split -l 25 "$KEYFILE" "$OUTDIR/${CHUNK_PREFIX}"

# ── 2) For each chunk, emit its JSON batch under batches/ ─
for chunk in "$OUTDIR/${CHUNK_PREFIX}"*; do
  basename=$(basename "$chunk")            # e.g. chunk_aa
  jsonfile="$OUTDIR/${basename}.json"      # e.g. batches/chunk_aa.json

  {
    echo '{'
    echo '  "test": ['
    while read -r ID ACC; do
      # strip any stray CR
      ID=${ID//$'\r'/}
      ACC=${ACC//$'\r'/}
      cat <<EOF
    {
      "PutRequest": {
        "Item": {
          "ID": {"S":"$ID"},
          "ACCOUNTNUMBER": {"S":"$ACC"},
          "expiration": {"N":"$EXPIRATION"}
        }
      }
    },
EOF
    done < "$chunk"
    echo '  ]'
    echo '}'
  } | sed '$s/},/}/' > "$jsonfile"

  echo "Prepared $jsonfile"
done

===================================================================

#!/usr/bin/env bash
set -euo pipefail

EXPIRATION=$(date -u -d "+60 days" +%s)

# 1) Split keys into 25-line chunks named batch_aa, batch_ab, …
split -l 25 keys_to_update.txt batch_

# 2) For each chunk, emit its JSON (no trailing comma on last item) then delete the chunk file
for chunk in batch_*; do
  jsonfile="${chunk}.json"

  {
    echo '{'
    echo '  "test": ['

    # read all lines into an array so we can detect the last element
    mapfile -t lines < "$chunk"
    count=${#lines[@]}

    for i in "${!lines[@]}"; do
      # split the tab-separated ID and ACCOUNTNUMBER
      IFS=$'\t' read -r ID ACC <<< "${lines[i]}"
      # strip any stray CR
      ID=${ID//$'\r'/}
      ACC=${ACC//$'\r'/}

      # print the object
      cat <<EOF
    {
      "PutRequest": {
        "Item": {
          "ID": {"S":"$ID"},
          "ACCOUNTNUMBER": {"S":"$ACC"},
          "expiration": {"N":"$EXPIRATION"}
        }
      }
    }EOF

      # only add a comma if this is not the last item
      if (( i < count - 1 )); then
        printf ',\n'
      else
        printf '\n'
      fi
    done

    echo '  ]'
    echo '}'
  } > "$jsonfile"

  echo "Prepared $jsonfile"
  # remove the raw chunk so only JSON files remain
  rm -- "$chunk"
done


