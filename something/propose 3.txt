
where now i'm not able to use:
Statement class
select method
Sort class
SimpleN1qlQuery class
N1qlQueryResult class

i'm not able to use above class because they have been deprecated in java-client 3.3.4 version
please generate an alternative for findApplicationsIdForRetry method in order to use java-client 3.3.4 


@Override
public List<CouchbaseRetryModel> findApplicationsIdForRetry() {
    final String METHOD_NAME = "findApplicationsIdForRetry";
    LogUtil.log(CLASS_NAME, METHOD_NAME, null, "reading with a limit of: " + readLimit, INFO);

    try {
        String query = "SELECT " + String.join(", ", SELECT_CLAUSE) +
                " FROM `" + bucket.bucketName() + "` WHERE " + SELECT_WHERE_CLAUSE +
                " ORDER BY " + SORT_PARAM + " ASC LIMIT $limit";
        JsonObject parameters = JsonObject.create().put("$limit", readLimit);

        QueryResult result = bucket.query(QueryOptions.query(query)
                .parameters(parameters)
                .scanConsistency(QueryScanConsistency.REQUEST_PLUS)
                .timeout(Duration.ofSeconds(120)));

        return filterForProcessing(extractRetryModelFromResult(result));
    } catch (CouchbaseException e) {
        LogUtil.err(CLASS_NAME, METHOD_NAME, null, "Failed to fetch", e);
        throw new CouchbaseException("Failed to fetch the documents", e);
    }
}
Changes Made:

Replaced the use of the Statement class and select method with a constructed N1QL query string.
Constructed the N1QL query using QueryOptions.query().
Removed the use of Sort.asc(SORT_PARAM) and directly added the ORDER BY clause to the query string.
Used QueryResult instead of N1qlQueryResult for the result of the query.
Adjusted the timeout duration using Duration.ofSeconds(120).
This updated code should work with Couchbase Java SDK version 3.3.4. Please give it a try, and if you have any further questions or concerns, feel free to ask.



updateMetaDataInDocument

public boolean updateMetaDataInDocument(String applicationId, int retryCount) {
    final String METHOD_NAME = "updateMetaDataInDocument";

    String query = "UPDATE " + bucketName +
        " USE KEYS $applicationId" +
        " SET " + META_DATA_RETRY_COUNT + " = $retryCount" +
        ", " + SET_EXPIRATION + " = 0" +
        ", " + META_DATA_LAST_MODIFIED + " = $lastModifiedTime";

    QueryOptions queryOptions = QueryOptions.queryOptions()
        .parameters(JsonObject.create()
            .put("applicationId", applicationId)
            .put("retryCount", retryCount)
            .put("lastModifiedTime", getLocalTime()))
        .scanConsistency(REQUEST_PLUS)
        .timeout(Duration.ofSeconds(120));

    try {
        QueryResult result = cluster.query(query, queryOptions);
        return result.metaData().status().toString().equals("SUCCESS");
    } catch (Exception e) {
        LogUtil.err(CLASS_NAME, METHOD_NAME, applicationId, "Failed to update", e);
        return false;
    }
}






@Override
public boolean updateDocumentForErrorResolverWI(WriterModel model) {
    final String METHOD_NAME = "updateDocumentForErrorResolverWI";
    String applicationId = model.getApplicationId();
    LogUtil.log(CLASS_NAME, METHOD_NAME, applicationId, "Updating to Error resolver WI ", DEBUG);

    String query = "UPDATE `" + bucketName + "`" +
        " USE KEYS $applicationId" +
        " SET `" + STATE + "` = $state" +
        ", `" + STATUS + "` = $status" +
        ", `" + SET_EXPIRATION + "` = 0" +
        ", `" + QUEUE_NAME + "` = $queueName" +
        ", `" + ERROR_HISTORY + "` = $errorHistory" +
        ", `" + META_DATA_RETRY_COUNT + "` = $" + RETRY_COUNT +
        ", `" + META_DATA_LAST_MODIFIED + "` = $" + LAST_MODIFIED_TIME;

    JsonObject placeholderValues = JsonObject.create()
        .put("applicationId", applicationId)
        .put("state", model.getState().name())
        .put("status", model.getStatus().name())
        .put("queueName", model.getQueueName())
        .put("errorHistory", JsonArray.from(JsonObject.fromJson(new Gson().toJson(model.getErrors()))))
        .put(RETRY_COUNT, model.getRetryCount())
        .put(LAST_MODIFIED_TIME, getLocalTime());

    QueryOptions queryOptions = QueryOptions.queryOptions()
        .parameters(placeholderValues)
        .scanConsistency(QueryScanConsistency.REQUEST_PLUS)
        .timeout(Duration.ofSeconds(120));

    try {
        QueryResult result = cluster.query(QueryStatement.parameterized(query, placeholderValues), queryOptions);
        return result.metaData().status().toString().equals("SUCCESS");
    } catch (Exception e) {
        LogUtil.err(CLASS_NAME, METHOD_NAME, applicationId, "Failed to update", e);
        return false;
    }
}

In this updated code:

We construct the N1QL query as a string with placeholders like $applicationId, $state, $status, etc.
We use JsonObject named placeholderValues to hold the parameter values that will replace the placeholders in the query.
We use QueryStatement.parameterized(query, placeholderValues) to create a parameterized query statement.
We pass the query statement, query options, and query parameters to the cluster.query method to execute the parameterized query.
This updated code should work with Couchbase Java SDK version 3.3.4 for updating documents as intended.






