seeSure! Here’s a breakdown for your script:

**Goal:**
The goal of the script is to update all existing records in the production DynamoDB table by adding an expiration field with a calculated expiration date, ensuring that only records that currently lack the expiration field are updated.

**Acceptance Criteria:**

1. The script must scan all existing records in the DynamoDB table.
2. Only records that do not have the expiration field should be updated.
3. The script should add the expiration field with a value calculated based on a defined logic (for example, a certain number of days from the current date).
4. New records or records that already have the expiration field should remain unchanged.

**Given-When-Then Scenario:**

* **Given** there are existing records in the DynamoDB table without an expiration field,
* **When** the script is executed,
* **Then** those records should have the expiration field added with the correct expiration date, and records that already had the expiration field should remain unchanged.

**Steps to Create the Script:**

1. **Set up your environment:** Make sure you have the AWS SDK installed for the language of your choice (e.g., Boto3 for Python).
2. **Scan the table:** Use the `Scan` operation to retrieve all records from the table.
3. **Check for the expiration field:** For each record, check if the expiration field is missing.
4. **Calculate the expiration date:** Define the logic for calculating the expiration date (e.g., current time plus a certain number of days).
5. **Update the record:** Use the `UpdateItem` operation to add the expiration field to records that need it.
6. **Run and verify:** Execute the script in a test environment first to ensure it works as expected before running it in production.
   \[media pointer="sediment://file\_00000000011c622fbe47b55d0c7dede0"]


powershell version

# Configuration
$tableName      = "dyno-db"
$logFile        = "expiration_update_log.csv"
$expirationDays = 60

# Functions
toolbox Get-Epoch60DaysAhead {
    # Returns the Unix epoch seconds for now + $expirationDays
    return [int][double]::Parse(
        (Get-Date)
            .AddDays($expirationDays)
            .ToUniversalTime()
            .Subtract([datetime]'1970-01-01')
            .TotalSeconds
    )
}

toolbox Write-Log {
    param(
        [string]$id,
        [string]$accountNumber,
        [string]$status
    )
    # Append a CSV line to the log file
    Add-Content -Path $logFile -Value "$id,$accountNumber,$status"
}

# Initialize log
"ID,ACCOUNTNUMBER,Status" | Set-Content -Path $logFile -Encoding utf8
Write-Host "Scanning DynamoDB table '$tableName'..."

$nextToken    = $null
$updatedCount = 0
$page         = 1

do {
    # Build scan command
    if ($null -eq $nextToken) {
        $scanCmd = "aws dynamodb scan --table-name $tableName --output json"
    } else {
        $scanCmd = "aws dynamodb scan --table-name $tableName --output json --starting-token `"$nextToken`""
    }

    # Execute scan and parse JSON
    $scanResult = Invoke-Expression $scanCmd | ConvertFrom-Json

    if ($null -eq $scanResult.Items) {
        Write-Host "No items found on page $page."
        break
    }

    foreach ($item in $scanResult.Items) {
        $id            = $null
        $accountNumber = $null
        $hasExpiration = $false

        # Extract keys
        if ($item.PSObject.Properties.Name -contains "ID" -and $item.ID.PSObject.Properties.Name -contains "S") {
            $id = $item.ID.S
        }
        if ($item.PSObject.Properties.Name -contains "ACCOUNTNUMBER" -and $item.ACCOUNTNUMBER.PSObject.Properties.Name -contains "S") {
            $accountNumber = $item.ACCOUNTNUMBER.S
        }
        # Check if expiration already exists
        if ($item.PSObject.Properties.Name -contains "expiration") {
            $hasExpiration = $true
        }

        # If valid keys and no expiration, update it
        if ($null -ne $id -and $null -ne $accountNumber -and -not $hasExpiration) {
            $expiration = Get-Epoch60DaysAhead

            # Fixed here-string for PowerShell + AWS CLI
            $updateCmd = @"
aws dynamodb update-item --table-name $tableName `
  --key "{\"ID\":{\"S\":\"$id\"},\"ACCOUNTNUMBER\":{\"S\":\"$accountNumber\"}}" `
  --update-expression "SET expiration = :exp" `
  --expression-attribute-values "{\":exp\":{\"N\":\"$expiration\"}}" `
  --return-values NONE
"@

            # Diagnostic output (optional)
            Write-Host "Running update for ID=$id / Account=$accountNumber"
            Write-Host $updateCmd

            # Execute update
            Invoke-Expression $updateCmd | Out-Null
            Write-Log -id $id -accountNumber $accountNumber -status "Updated"
            $updatedCount++
        } else {
            # Log skipped items
            Write-Log -id $id -accountNumber $accountNumber -status "Skipped: Already has expiration or missing keys"
        }
    }

    # Handle pagination tokens
    if ($scanResult.PSObject.Properties.Name -contains "NextToken") {
        $nextToken = $scanResult.NextToken
    } elseif ($scanResult.PSObject.Properties.Name -contains "LastEvaluatedKey") {
        $nextToken = $scanResult.LastEvaluatedKey | ConvertTo-Json -Compress
    } else {
        $nextToken = $null
    }

    $page++
} while ($null -ne $nextToken -and $nextToken -ne "")

Write-Host "`nUpdate complete. $updatedCount records updated. See $logFile for details."

============================================================================================================

# Configuration
$tableName      = "dyno-db"
$logFile        = "expiration_update_log.csv"
$expirationDays = 60

# Functions
function Get-Epoch60DaysAhead {
    return [int][double]::Parse(
        (Get-Date)
            .AddDays($expirationDays)
            .ToUniversalTime()
            .Subtract([datetime]'1970-01-01')
            .TotalSeconds
    )
}

function Write-Log {
    param(
        [string]$id,
        [string]$accountNumber,
        [string]$status
    )
    Add-Content -Path $logFile -Value "$id,$accountNumber,$status"
}

# Initialize log
"ID,ACCOUNTNUMBER,Status" | Set-Content -Path $logFile -Encoding utf8
Write-Host "Scanning DynamoDB table '$tableName'..."

$nextToken    = $null
$updatedCount = 0
$page         = 1

do {
    # Build scan command
    if ($null -eq $nextToken) {
        $scanCmd = "aws dynamodb scan --table-name $tableName --output json"
    } else {
        $scanCmd = "aws dynamodb scan --table-name $tableName --output json --starting-token `"$nextToken`""
    }

    # Execute scan and parse JSON
    $scanResult = Invoke-Expression $scanCmd | ConvertFrom-Json

    if ($null -eq $scanResult.Items) {
        Write-Host "No items found on page $page."
        break
    }

    foreach ($item in $scanResult.Items) {
        $id            = $null
        $accountNumber = $null
        $hasExpiration = $false

        # Extract keys
        if ($item.PSObject.Properties.Name -contains "ID" -and $item.ID.PSObject.Properties.Name -contains "S") {
            $id = $item.ID.S
        }
        if ($item.PSObject.Properties.Name -contains "ACCOUNTNUMBER" -and $item.ACCOUNTNUMBER.PSObject.Properties.Name -contains "S") {
            $accountNumber = $item.ACCOUNTNUMBER.S
        }
        # Check existing expiration
        if ($item.PSObject.Properties.Name -contains "expiration") {
            $hasExpiration = $true
        }

        # Update if needed
        if ($null -ne $id -and $null -ne $accountNumber -and -not $hasExpiration) {
            $expiration = Get-Epoch60DaysAhead

            $updateCmd = @"
aws dynamodb update-item --table-name $tableName `
  --key "{\"ID\":{\"S\":\"$id\"},\"ACCOUNTNUMBER\":{\"S\":\"$accountNumber\"}}" `
  --update-expression "SET expiration = :exp" `
  --expression-attribute-values "{\":exp\":{\"N\":\"$expiration\"}}" `
  --return-values NONE
"@

            # Diagnostic output (optional)
            Write-Host "Running update for ID=$id / Account=$accountNumber"
            Write-Host $updateCmd

            # Execute update
            Invoke-Expression $updateCmd | Out-Null
            Write-Log -id $id -accountNumber $accountNumber -status "Updated"
            $updatedCount++
        } else {
            Write-Log -id $id -accountNumber $accountNumber -status "Skipped: Already has expiration or missing keys"
        }
    }

    # Pagination handling
    if ($scanResult.PSObject.Properties.Name -contains "NextToken") {
        $nextToken = $scanResult.NextToken
    } elseif ($scanResult.PSObject.Properties.Name -contains "LastEvaluatedKey") {
        $nextToken = $scanResult.LastEvaluatedKey | ConvertTo-Json -Compress
    } else {
        $nextToken = $null
    }

    $page++
} while ($null -ne $nextToken -and $nextToken -ne "")

Write-Host "`nUpdate complete. $updatedCount records updated. See $logFile for details."



powershell -NoProfile -Command { .\update_dynamo_expiration.ps1; exit }

=============================================================================
BAT

@echo off
setlocal enabledelayedexpansion

rem ── Configuration ─────────────
set "TABLE=dyno-db"
set "LOG=expiration_update_log.csv"
set /a EXP_DAYS=60

rem ── Compute expiration epoch (UTC now + EXP_DAYS)
for /f %%T in ('powershell -NoProfile -Command ^
  "(Get-Date).AddDays(%EXP_DAYS%).ToUniversalTime().Subtract([datetime]'1970-01-01').TotalSeconds|ForEach-Object {[int]$_}"') do (
  set "EXPIRATION=%%T"
)

rem ── Initialize CSV log
echo ID,ACCOUNTNUMBER,Status > "%LOG%"

rem ── Paging setup
set "NEXT_TOKEN="
set /a UPDATED=0

:PAGE_LOOP
  rem 1) Scan, filtering out items that already have 'expiration'
  if defined NEXT_TOKEN (
    set "SCAN_OPTS=--starting-token %NEXT_TOKEN%"
  ) else (
    set "SCAN_OPTS="
  )

  for /f "tokens=1,2" %%A in ('aws dynamodb scan --table-name %TABLE% ^
      --filter-expression "attribute_not_exists(expiration)" ^
      --projection-expression "ID,ACCOUNTNUMBER" ^
      --query "Items[*].[ID.S,ACCOUNTNUMBER.S]" ^
      --output text %SCAN_OPTS%') do (
      
      set "ID=%%A"
      set "ACC=%%B"

      rem 2) Update expiration
      aws dynamodb update-item ^
        --table-name %TABLE% ^
        --key "{\"ID\":{\"S\":\"!ID!\"},\"ACCOUNTNUMBER\":{\"S\":\"!ACC!\"}}" ^
        --update-expression "SET expiration = :exp" ^
        --expression-attribute-values "{\":exp\":{\"N\":\"%EXPIRATION%\"}}" ^
        --return-values NONE

      echo !ID!,!ACC!,Updated>>"%LOG%"
      set /a UPDATED+=1
  )

  rem 3) Get the NextToken for pagination (AWS CLI v2)
  for /f %%T in ('aws dynamodb scan --table-name %TABLE% ^
      --filter-expression "attribute_not_exists(expiration)" ^
      --projection-expression "ID" ^
      --query "NextToken" ^
      --output text') do set "NEXT_TOKEN=%%T"

  if "%NEXT_TOKEN%"=="None" set "NEXT_TOKEN="
  if defined NEXT_TOKEN goto PAGE_LOOP

:END
echo.
echo Update complete. %UPDATED% records updated. See %LOG%.
endlocal
